#!/usr/bin/env bash

# iam_chalenge - Advanced Automate Identity and Access Management(IAM) in Linux
# Author: Ishmael Gyamfi
# Date: May 3, 2025
# Description: Script script to automate user and group creation with specific settings

# Configurations
INPUT_FILE="users.csv"
LOG_FILE="iam_setup.log"
TEMP_PASSWORD="AmalitechGTP@Accra123" # to be changede pelase
SEND_EMAIL=false

EMAIL_FROM="${EMAIL_FROM:-ishmael.gyamfi.dev@gmail.com}"
EMAIL_FROM_NAME="${EMAIL_FROM_NAME:-IAM System}"
ADMIN_EMAIL="${ADMIN_EMAIL:-ishmael.gyamfi.dev@gmail.com}"

# Display usage information
usage() {
    echo "Usage: $0 [OPTIONS]"
    echo "Options:"
    echo "  -f, --file FILE    Specify input CSV file (default: users.csv)"
    echo "  -l, --log FILE     Specify log file (default: iam_setup.log)"
    echo "  -p, --password PWD Set temporary password (default: AmalitechGTP@Accra123)"
    echo "  -e, --email        Send email notifications"
    echo "  -c, --config FILE  Specify config file (default: .iam_config.env)" # this part is yet to be completed...
    echo "  -h, --help         Display this help message"
    exit 1
}

# command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -f|--file)
            INPUT_FILE="$2"
            shift 2
            ;;
        -l|--log)
            LOG_FILE="$2"
            shift 2
            ;;
        -p|--password)
            TEMP_PASSWORD="$2"
            shift 2
            ;;
        -e|--email)
            SEND_EMAIL=true
            shift
            ;;
        -c|--config)
            CONFIG_FILE="$2"
            shift 2
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo "Unknown option: $1"
            usage
            ;;
    esac
done

# Check if running as root
if [ "$(id -u)" -ne 0 ]; then
    echo "This script must be run as root" >&2
    exit 1
fi

# Function to log messages
log_message() {
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    echo "[$timestamp] $1" | tee -a "$LOG_FILE"
}

# Function to check password compl√©xity
check_password_complexity() {
    local password="$1"

    # At least 8 characters
    if [ ${#password} -lt 8 ]; then
        return 1
    fi

    # Contains at least one lowercase letter
    if ! echo "$password" | grep -q "[a-z]"; then
        return 1
    fi

    # Contains at least one uppercase letter
    if ! echo "$password" | grep -q "[A-Z]"; then
        return 1
    fi

    # Contains at least one digit
    if ! echo "$password" | grep -q "[0-9]"; then
        return 1
    fi

    # Contains at least one special character
    if ! echo "$password" | grep -q "[!@#$%^&*()_+{}|:<>?]"; then
        return 1
    fi

    return 0
}

# Function to check if a command is available
command_exists() {
    command -v "$1" >/dev/null 2>&1
}


send_email() {
    local to_address="$1"
    local subject="$2"
    local body="$3"
    local recipient_name="$4"
    local status=1  # for failure

    # checking if mail exists
    if command_exists mail; then
        echo "$body" | mail -s "$subject" -a "From: ${EMAIL_FROM_NAME} <${EMAIL_FROM}>" "$to_address"
        status=$?
        log_message "Used mail command to send email to $to_address (status: $status)"
    else
        log_message "ERROR: No email sending utility found"
        return 1
    fi

    if [ $status -eq 0 ]; then
        return 0  # forsuccess
    else
        log_message "ERROR: Failed to send email to $to_address (status: $status)"
        return 1  # failure
    fi
}

# send email notification
send_email_notification() {
    local username="$1"
    local fullname="$2"
    local group="$3"
    local email="$4"

    if [ "$SEND_EMAIL" = true ]; then

        if [ -z "$EMAIL_FROM" ] || [ -z "$EMAIL_FROM_NAME" ]; then
            log_message "ERROR: Email configuration incomplete. Required: EMAIL_FROM, EMAIL_FROM_NAME"
            return 1
        fi

        # tmplate email content for user
        local user_subject="Your New Account: $username"
        local user_body="Hello $fullname,

        Your account has been created on the system with the following details:
        - Username: $username
        - Group: $group
        - Temporary Password: $TEMP_PASSWORD

        You will be required to change your password on first login.

        Regards,
        IT Department"

        # template email content for admin
        local admin_subject="New User Account Created: $username"
        local admin_body="Hello Administrator,

        A new user account has been created with the following details:
        - Username: $username
        - Full Name: $fullname
        - Group: $group
        - Email: $email

        This is an automated notification.

        Regards,
        IAM System"

        # Send email to user if email is provided
        if [ -n "$email" ]; then
            if send_email "$email" "$user_subject" "$user_body" "$fullname"; then
                log_message "Email notification sent to user $username at $email"
            else
                log_message "ERROR: Failed to send email to user $username at $email"
            fi
        else
            log_message "WARNING: No email address provided for user $username"
        fi

        # Send notification to admin if admin email is configured
        if [ -n "$ADMIN_EMAIL" ]; then
            if send_email "$ADMIN_EMAIL" "$admin_subject" "$admin_body" "System Administrator"; then
                log_message "Email notification sent to admin at $ADMIN_EMAIL"
            else
                log_message "ERROR: Failed to send email to admin at $ADMIN_EMAIL"
            fi
        else
            log_message "WARNING: No admin email address configured"
        fi
    fi
}

# Initialize log file
echo "# IAM Setup Log - Started on $(date)" > "$LOG_FILE"
log_message "Script started"

# Load configuration
load_config

# Check if input file exists
if [ ! -f "$INPUT_FILE" ]; then
    log_message "ERROR: Input file $INPUT_FILE not found"
    exit 1
fi

# Check if CSV file has proper format
if [[ "$INPUT_FILE" == *.csv ]]; then
    header=$(head -n 1 "$INPUT_FILE") #checkin here
    expected_header="username,fullname,group,email"
    if [[ "$header" != *"username"* || "$header" != *"fullname"* || "$header" != *"group"* ]]; then
        log_message "WARNING: CSV file may not have the expected format. Expected format: $expected_header"
        echo "Note: CSV should have columns for username, fullname, group, and optionally email"
    fi
fi

# Check password complexity
if ! check_password_complexity "$TEMP_PASSWORD"; then
    log_message "ERROR: Temporary password does not meet complexity requirements"
    echo "Password must have at least 8 characters, including uppercase, lowercase, digit, and special character"
    exit 1
fi

# Main logic bgins here
while IFS=, read -r username fullname group email || [[ -n "$username" ]]; do
    # Skinping empty lines or comments if they exists
    if [[ -z "$username" || "$username" == \#* ]]; then
        continue
    fi

    log_message "Processing user: $username ($fullname) for group: $group"

    # Check if group exists and create if not
    if ! getent group "$group" > /dev/null; then
        groupadd "$group"
        if [ $? -eq 0 ]; then
            log_message "Created group: $group"
        else
            log_message "ERROR: Failed to create group: $group"
            continue
        fi
    else
        log_message "Group $group already exists"
    fi

    # Check if user exists
    if id "$username" &>/dev/null; then
        log_message "User $username already exists"
    else
        # creatin user with home directory and assign to group
        useradd -m -c "$fullname" -g "$group" "$username"
        if [ $? -eq 0 ]; then
            log_message "Created user: $username with home directory"

            # Seting temp password
            echo "$username:$TEMP_PASSWORD" | chpasswd
            if [ $? -eq 0 ]; then
                log_message "Set temporary password for $username"

                # Force password change on first login
                chage -d 0 "$username"
                if [ $? -eq 0 ]; then
                    log_message "Password change required at next login for $username"
                else
                    log_message "ERROR: Failed to set password expiration for $username"
                fi
            else
                log_message "ERROR: Failed to set password for $username"
            fi

            # Set permissions on home directory
            chmod 700 "/home/$username"
            if [ $? -eq 0 ]; then
                log_message "Set permissions 700 on /home/$username"
            else
                log_message "ERROR: Failed to set permissions on /home/$username"
            fi

            # Send email notification
            send_email_notification "$username" "$fullname" "$group" "$email"
        else
            log_message "ERROR: Failed to create user: $username"
        fi
    fi
done < "$INPUT_FILE"

echo "IAM setup completed. Check $LOG_FILE for details."
